package com.coralblocks.coralproto;

import java.io.IOException;

import org.junit.Assert;
import org.junit.Test;

import com.coralblocks.coralproto.field.BytesField;
import com.coralblocks.coralproto.field.CharsField;
import com.coralblocks.coralproto.field.SubtypeField;
import com.coralblocks.coralproto.field.TypeField;
import com.coralblocks.coralproto.field.VarBytesField;
import com.coralblocks.coralproto.field.VarCharsField;


public class CharsAndBytesTest {
	
	public static class CharsAndBytesProtoMessage extends AbstractProto {
		
		private static final String IDL_CODE = """
				
				TYPE = C
				SUBTYPE = B
				
				myChars: chars(8) 
				myVarChars: varchars(1024)
				myBytes: bytes(8) 
				myVarBytes: varbytes(1024)				
				
		""";
		
		public static void main(String[] args) throws IOException {
			IDL idl = new IDL(IDL_CODE, IDL.INDENT + IDL.INDENT);
			String filePath = "src/test/java/com/coralblocks/coralproto/" + CharsAndBytesTest.class.getSimpleName() + ".java";
			String sourceCode = idl.getCode();
			IDL.replaceAutoGeneratedCode(filePath, sourceCode);
		}
		
		// Auto-generated code. Do not edit or change anything below here
		
		// BEGIN_AUTO_GENERATED_CODE

        public final static char TYPE = 'C';
        public final static char SUBTYPE = 'B';

        public final TypeField typeField = new TypeField(this, TYPE);
        public final SubtypeField subtypeField = new SubtypeField(this, SUBTYPE);

        public final CharsField myChars = new CharsField(this, 8);

        public final VarCharsField myVarChars = new VarCharsField(this, 1024);

        public final BytesField myBytes = new BytesField(this, 8);

        public final VarBytesField myVarBytes = new VarBytesField(this, 1024);


		// END_AUTO_GENERATED_CODE
	}
	
	@Test
	public void testFixedCharsAndBytes() {
		
		CharsAndBytesProtoMessage proto = new CharsAndBytesProtoMessage();
		
		Assert.assertEquals(CharsAndBytesProtoMessage.TYPE, proto.getType());
		Assert.assertEquals(CharsAndBytesProtoMessage.SUBTYPE, proto.getSubtype());
		
		Assert.assertEquals(false, proto.myChars.isOptional());
		Assert.assertEquals(true, proto.myChars.isPresent());
		
		StringBuilder sb = new StringBuilder(proto.myChars.size());
		for(int i = 0; i < proto.myChars.size(); i++) sb.append(" ");
		Assert.assertEquals(sb.toString(), proto.myChars.get().toString());
		
		final String s = "BLAH";

		proto.myChars.set("BLAH");
		sb.setLength(0);
		sb.append(s);
		for(int i = 0; i < proto.myChars.size() - s.length(); i++) sb.append(" ");
		Assert.assertEquals(sb.toString(), proto.myChars.get().toString());
		
		proto.myChars.clear();
		sb.setLength(0);
		for(int i = 0; i < proto.myChars.size(); i++) sb.append(" ");
		Assert.assertEquals(sb.toString(), proto.myChars.get().toString());
		
	}
}
